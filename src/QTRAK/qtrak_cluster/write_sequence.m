function [tcnt] = write_sequence(obj,obj1,obj2,roi,tcnt,params,scale,framen,FigureHandle)
flywidth = .5;

% figure(FigureHandle);

%%
% The first two _line_ commands draw small grey and
% yellow rectangles to mark the fly locations on the
% screen. The next two _line_ commands draw the blue
% and red triangles to mark the fly directions inside
% each chambers.

line( [ obj.i1111.xc - 0.1 , obj.i1111.xc - 0.1 , ...
    obj.i1111.xc + 0.1 , obj.i1111.xc + 0.1 , ...
    obj.i1111.xc - 0.1 ]/ scale.x + roi.cols(1), ...
    [ obj.i1111.yc - 0.1 , obj.i1111.yc + 0.1 , ...
    obj.i1111.yc + 0.1 , obj.i1111.yc - 0.1 , ...
    obj.i1111.yc - 0.1 ]/ scale.y + roi.rows(1), ...
    'Color',[0.2 0.2 0.2]);
line( [ obj.i1112.xc - 0.1 , obj.i1112.xc - 0.1 , ...
    obj.i1112.xc + 0.1 , obj.i1112.xc + 0.1 , ...
    obj.i1112.xc - 0.1 ]/ scale.x + roi.cols(1), ...
    [ obj.i1112.yc - 0.1 , obj.i1112.yc + 0.1 , ...
    obj.i1112.yc + 0.1 , obj.i1112.yc - 0.1 , ...
    obj.i1112.yc - 0.1] / scale.y + roi.rows(1), ...
    'Color', [.6 .6 0] );

fc1 = flywidth*(cos(obj.i1111.head+params.hpi));
fs1 = flywidth*(sin(obj.i1111.head+params.hpi));
fc2 = flywidth*(cos(obj.i1112.head+params.hpi));
fs2 = flywidth*(sin(obj.i1112.head+params.hpi));
line( [ obj.i1111.xh , obj.i1111.xt - fc1 , ...
    obj.i1111.xt + fc1 , obj.i1111.xh ] / ...
    scale.x + roi.cols(1), ...
    [ obj.i1111.yh , obj.i1111.yt - fs1 , ...
    obj.i1111.yt + fs1 , obj.i1111.yh ] / ...
    scale.y + roi.rows(1), 'Color', [.2 .2 1], 'LineWidth', 2 );
line( [ obj.i1112.xh , obj.i1112.xt - fc2, ...
    obj.i1112.xt + fc2 , obj.i1112.xh ] / ...
    scale.x + roi.cols(1), ...
    [ obj.i1112.yh , obj.i1112.yt - fs2, ...
    obj.i1112.yt + fs2 , obj.i1112.yh] / ...
    scale.y + roi.rows(1), 'Color', [1 .2 .2], 'LineWidth', 2 );

%% Wings - draw line from fly body center to wing tip as
%% measured
f1rx = cos(obj.i1111.head-obj.i1111.phir+pi)*obj.i1111.r+obj.i1111.xc;
f1ry = sin(obj.i1111.head-obj.i1111.phir+pi)*obj.i1111.r+obj.i1111.yc;
f2rx = cos(obj.i1112.head-obj.i1112.phir+pi)*obj.i1112.r+obj.i1112.xc;
f2ry = sin(obj.i1112.head-obj.i1112.phir+pi)*obj.i1112.r+obj.i1112.yc;
f1lx = cos(obj.i1111.head+obj.i1111.phil+pi)*obj.i1111.l+obj.i1111.xc;
f1ly = sin(obj.i1111.head+obj.i1111.phil+pi)*obj.i1111.l+obj.i1111.yc;
f2lx = cos(obj.i1112.head+obj.i1112.phil+pi)*obj.i1112.l+obj.i1112.xc;
f2ly = sin(obj.i1112.head+obj.i1112.phil+pi)*obj.i1112.l+obj.i1112.yc;
line( [ obj.i1111.xc , f1rx] / scale.x + roi.cols(1), ...
    [ obj.i1111.yc , f1ry] / scale.y + roi.rows(1), ...
    'Color', [.2 .9 .2], 'LineWidth', 2 );
line( [ obj.i1111.xc , f1lx] / scale.x + roi.cols(1), ...
    [ obj.i1111.yc , f1ly] / scale.y + roi.rows(1), ...
    'Color', [.9 .9 .2], 'LineWidth', 2 );
line( [ obj.i1112.xc , f2rx] / scale.x + roi.cols(1), ...
    [ obj.i1112.yc , f2ry] / scale.y + roi.rows(1), ...
    'Color', [.2 .9 .2], 'LineWidth', 2 );
line( [ obj.i1112.xc , f2lx] / scale.x + roi.cols(1), ...
    [ obj.i1112.yc , f2ly] / scale.y + roi.rows(1), ...
    'Color', [.9 .9 .2], 'LineWidth', 2 );
%%
% The following motion lines can only be drawn after
% more than seven frames (measurements) are made, for
% the obvious reason discussed above: the first
% acceleration vector is availabe only after six frames
% are processed.

if (framen > 7),
    
    for b=1:tcnt,
        if (tcnt > 10),
            c='r';
        else
            c='g';
        end
        if (b > 10),
            line( [ obj1.pos_x(framen-3+b-tcnt), ...
                obj1.pos_x(framen-2+b-tcnt) ] / ...
                scale.x + roi.cols(1), ...
                [ obj1.pos_y(framen-3+b-tcnt), ...
                obj1.pos_y(framen-2+b-tcnt) ] / ...
                scale.y + roi.rows(1), 'Color', 'g' );
            line( [ obj2.pos_x(framen-3+b-tcnt), ...
                obj2.pos_x(framen-2+b-tcnt) ] / ...
                scale.x + roi.cols(1), ...
                [ obj2.pos_y(framen-3+b-tcnt), ...
                obj2.pos_y(framen-2+b-tcnt) ] / ...
                scale.y + roi.rows(1), 'Color', 'g' );
        else
            line( [ obj1.pos_x(framen-3+b-tcnt), ...
                obj1.pos_x(framen-2+b-tcnt)] / ...
                scale.x + roi.cols(1), ...
                [ obj1.pos_y(framen-3+b-tcnt), ...
                obj1.pos_y(framen-2+b-tcnt)] / ...
                scale.y + roi.rows(1), 'Color', c );
            line( [ obj2.pos_x(framen-3+b-tcnt), ...
                obj2.pos_x(framen-2+b-tcnt)] / ...
                scale.x + roi.cols(1), ...
                [ obj2.pos_y(framen-3+b-tcnt), ...
                obj2.pos_y(framen-2+b-tcnt)] / ...
                scale.y + roi.rows(1), 'Color', c );
        end
    end
    tcnt = tcnt + 1;
    if (tcnt > 30),
        tcnt = 28;
    end
    
end
end
